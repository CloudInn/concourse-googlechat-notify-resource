#!/usr/bin/env python3

from __future__ import print_function
import json
import os
import sys
import requests


class GoogleChatNotifyResource:
    """Notify resource implementation."""

    def send(self, url, msg):
        """Construct the webhook request and send it."""
        headers = {'Content-Type': 'application/json; charset=UTF-8'}
        body = {'text': msg}

        response = requests.request("POST", url, json=body, headers=headers)

        if response.status_code != 200:
            raise Exception('Unexpected response {}'.format(response.status_code))

        return (response.status_code, response.text)

    def run(self, command_name, json_data, command_arguments):
        """Extract source/params, perform the requested command and return the output."""
        # combine source and params
        data = json.loads(json_data)
        source = data.get('source', dict())
        params = data.get('params', dict())

        url = source.get('webhook_url')
        message = params.get('message')
        message_file = params.get('message_file')
        build_uuid = os.getenv('BUILD_ID')
        build_id = os.getenv('BUILD_NAME')
        job_name = os.getenv('BUILD_JOB_NAME')
        pipeline_name = os.getenv('BUILD_PIPELINE_NAME')
        team_name = os.getenv('BUILD_TEAM_NAME')
        atc_url = os.getenv('ATC_EXTERNAL_URL')

        message_file_path = "%s/%s" % (command_arguments[0], message_file)
        message_from_file = ""
        if os.path.isfile(message_file_path):
            with open(message_file_path, 'r') as f:
                message_from_file = f.read()

        full_message = (message or '') + message_from_file
        text = "Pipeline: %s\nJob: #%s %s\n%s" % (pipeline_name, build_id, job_name, full_message)

        response = {
            "version": {},
            "metadata": [
                {"name": "message", "value": full_message},
            ]
        }

        if not url:
            print("Missing 'webhock_url' under resource source.\nSkip posting to GoogleChat.", file=sys.stderr)
            response["metadata"] += [
                {"name": "status", "value": "Failed"},
                {"name": "error", "value": "Missing 'webhock_url' in source"}
            ]
            return json.dumps(response)

        status, text = self.send(url, text)
        print("Successfully posted to GoogleChat!", file=sys.stderr)
        api_res = json.loads(text)

        response["metadata"] = [
            {"name": "status", "value": "Posted"},
            {"name": "message", "value": api_res.get('text')},
            {"name": "sender_name", "value": api_res.get('sender') and api_res['sender'].get('name')},
            {"name": "sender_display_name", "value": api_res.get('sender') and api_res['sender'].get('displayName')},
            {"name": "space_name", "value": api_res.get('space') and api_res['space'].get('name')},
            {"name": "space_type", "value":  api_res.get('space') and api_res['space'].get('type')},
            {"name": "space_display_name", "value": api_res.get('space') and api_res['space'].get('displayName')},
            {"name": "thread_name", "value": api_res.get('thread') and api_res['thread'].get('name')},
            {"name": "create_time", "value": api_res.get('createTime')},
        ]

        return json.dumps(response)


if __name__ == '__main__':
    try:
        print(GoogleChatNotifyResource().run(os.path.basename(__file__), sys.stdin.read(), sys.argv[1:]))
    except Exception as err:
        print("Something wrong happened, skip posting to GoogleChat:\n\nError:\n%s" % err, file=sys.stderr)
        print({
            "version": {},
            "metadata": [
                {"name": "status", "value": "Failed"},
            ]
        })
